package ${bussiPackage}.${entityPackage}.service.impl;

import ${bussiPackage}.${entityPackage}.entity.${entityName};
<#list subTables as sub>
import ${bussiPackage}.${entityPackage}.entity.${sub.entityName};
</#list>
<#list subTables as sub>
import ${bussiPackage}.${entityPackage}.mapper.${sub.entityName}Mapper;
</#list>
import ${bussiPackage}.${entityPackage}.mapper.${entityName}Mapper;
import ${bussiPackage}.${entityPackage}.service.I${entityName}Service;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import java.io.Serializable;
import java.util.List;
import java.util.Collection;

<#assign bpm_flag=false>
<#list originalColumns as po>
<#if po.fieldDbName=='bpm_status'>
  <#assign bpm_flag=true>
</#if>
</#list>

<#if bpm_flag>
import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.util.IdUtil;
import cn.hutool.core.util.ObjectUtil;
import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import org.jeecg.modules.flowable.apithird.business.entity.FlowMyBusiness;
import org.jeecg.modules.flowable.apithird.service.FlowCallBackServiceI;
import org.jeecg.modules.flowable.apithird.service.FlowCommonService;
import java.util.Map;
import java.util.stream.Collectors;
</#if>



/**
 * @Description: ${tableVo.ftlDescription}
 * @Author: jeecg-boot
 * @Date:   ${.now?string["yyyy-MM-dd"]}
 * @Version: V1.0
 */
@Service("${entityName?uncap_first}Service")
public class ${entityName}ServiceImpl extends ServiceImpl<${entityName}Mapper, ${entityName}> implements I${entityName}Service, <#if bpm_flag> FlowCallBackServiceI </#if> {

	@Autowired
	private ${entityName}Mapper ${entityName?uncap_first}Mapper;
	<#list subTables as sub>
	@Autowired
	private ${sub.entityName}Mapper ${sub.entityName?uncap_first}Mapper;
	</#list>

	<#if bpm_flag>
    @Autowired
    FlowCommonService flowCommonService;

    /**
     * 关联流程
     * @param dataId 业务id
     */
    @Override
    public void relationAct(String dataId) {
        flowCommonService.initActBusiness("请假流程",dataId,"${entityName?uncap_first}Service","process_1zwelvy5",null,null);
    }

    @Override
    public <E extends IPage<${entityName}>> E page(E page, Wrapper<${entityName}> queryWrapper) {
        IPage<${entityName}> pageList = super.page(page, queryWrapper);
        List<${entityName}> records = pageList.getRecords();
        if (CollUtil.isNotEmpty(records)) {
            List<String> ids = records.stream().map(${entityName}::getId).collect(Collectors.toList());
            Map<String, FlowMyBusiness> flowMyBusinessMap = flowCommonService.getMapByDataIds(ids);
            for (${entityName} record : records) {
                FlowMyBusiness flowMyBusiness = flowMyBusinessMap.get(record.getId());
                if (ObjectUtil.isNotNull(flowMyBusiness)) {
                    BeanUtil.copyProperties(flowMyBusiness,record,"id","createBy","createTime","updateBy","updateTime");
                }
            }
        }
        return page;
    }
    </#if>
	
	@Override
	@Transactional(rollbackFor = Exception.class)
	public void saveMain(${entityName} ${entityName?uncap_first}, <#list subTables as sub>List<${sub.entityName}> ${sub.entityName?uncap_first}List<#if sub_has_next>,</#if></#list>) {
	    <#if bpm_flag>
        /**新增数据，初始化流程关联信息**/
        ${entityName?uncap_first}.setId(IdUtil.fastSimpleUUID());
        this.relationAct(${entityName?uncap_first}.getId());
        </#if>
		${entityName?uncap_first}Mapper.insert(${entityName?uncap_first});
		<#list subTables as sub>
		if(${sub.entityName?uncap_first}List!=null && ${sub.entityName?uncap_first}List.size()>0) {
			for(${sub.entityName} entity:${sub.entityName?uncap_first}List) {
				<#list sub.foreignKeys as key>
				//外键设置
				<#if key?lower_case?index_of("${primaryKeyField}")!=-1>
				entity.set${key?cap_first}(${entityName?uncap_first}.get${primaryKeyField?cap_first}());
				<#else>
				entity.set${key?cap_first}(${entityName?uncap_first}.get${key}());
				</#if>
				</#list>
				${sub.entityName?uncap_first}Mapper.insert(entity);
			}
		}
		</#list>
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public void updateMain(${entityName} ${entityName?uncap_first},<#list subTables as sub>List<${sub.entityName}> ${sub.entityName?uncap_first}List<#if sub_has_next>,</#if></#list>) {
		${entityName?uncap_first}Mapper.updateById(${entityName?uncap_first});
		
		//1.先删除子表数据
		<#list subTables as sub>
		${sub.entityName?uncap_first}Mapper.deleteByMainId(${entityName?uncap_first}.getId());
		</#list>
		
		//2.子表数据重新插入
		<#list subTables as sub>
		if(${sub.entityName?uncap_first}List!=null && ${sub.entityName?uncap_first}List.size()>0) {
			for(${sub.entityName} entity:${sub.entityName?uncap_first}List) {
				<#list sub.foreignKeys as key>
				//外键设置
				<#if key?lower_case?index_of("${primaryKeyField}")!=-1>
				entity.set${key?cap_first}(${entityName?uncap_first}.get${primaryKeyField?cap_first}());
				<#else>
				entity.set${key?cap_first}(${entityName?uncap_first}.get${key}());
				</#if>
				</#list>
				${sub.entityName?uncap_first}Mapper.insert(entity);
			}
		}
		</#list>
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public void delMain(String id) {
		<#list subTables as sub>
		${sub.entityName?uncap_first}Mapper.deleteByMainId(id);
		</#list>
		${entityName?uncap_first}Mapper.deleteById(id);
		<#if bpm_flag>
		/**删除数据，移除流程关联信息**/
        flowCommonService.delActBusiness(id.toString());
        </#if>
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public void delBatchMain(Collection<? extends Serializable> idList) {
		for(Serializable id:idList) {
			<#list subTables as sub>
			${sub.entityName?uncap_first}Mapper.deleteByMainId(id.toString());
			</#list>
			${entityName?uncap_first}Mapper.deleteById(id);
		}
	}
	
}
